{"version":3,"sources":["redux/reducers/todo/todo.js","redux/reducers/todo/index.js","redux/reducers/rootReducer.js","redux/storeConfig/store.js","redux/actions/todo/index.js","colorPicker.js","task.jsx","column.jsx","menu.js","todo.js","index.js"],"names":["initialState","todos","tasks","todo","state","action","type","order2","combineReducers","rootReducer","todoApp","todoReducer","middlewares","thunk","createDebounce","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","apiURI","getTodos","dispatch","a","axios","get","then","result","data","catch","err","console","log","addNewColumn","column","post","response","changeColumns","put","deleteColumn","id","delete","deleteTask","Button","styled","button","props","background","color","col","amt","usePound","slice","num","parseInt","r","b","g","toString","LightenDarkenColor","ColorPicker","colors","this","map","onClick","e","onChangeComplete","Component","Container","div","Name","More","Item","Submit","Title","Inputs","Task","activeId","task","_id","owner","name","status","desk","draggableId","index","provided","snapshot","draggableProps","dragHandleProps","ref","innerRef","isDragging","Dialog","isShown","title","onCloseComplete","setState","hasFooter","TextInput","width","onChange","target","value","placeholder","Textarea","appearance","intent","changeTask","disabled","Popover","position","content","Group","onSelect","IconButton","height","icon","React","connect","h3","Title2","TaskList","Column","collum","Fragment","marginLeft","style","float","cursor","droppableId","isDropDisabled","droppableProps","isDraggingOver","key","Components","Styles","boxShadow","Menu","taskIsShown","columnIsShown","comboBoxItems","collums","label","Combobox","items","itemToString","item","selected","addNewTask","app","Todo","onDragEnd","destination","source","sourceColumn","find","p","destColumn","sourceItems","destItems","splice","removed","patchColumns","copiedItems","newColumnOrder","Array","from","newTodos","0","movingColumn","length","Pane","display","margin","minHeight","overflow","direction","columnId","order","patch","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d4b86376.chunk.js","sourcesContent":["const initialState = {\n  todos: [],\n  tasks: [],\n};\n\nconst todo = (state = initialState, action) => {\n  switch (action.type) {\n    case \"GET_TODOS\":\n      return { ...state, todos: action.todos };\n    case \"ADD_TASK\":\n      return { ...state };\n    case \"ADD_COLUMN\":\n      return { ...state };\n    case \"DELETE_COLUMN\":\n      return { ...state };\n    case \"DELETE_TASK\":\n      return { ...state };\n    case \"PATCH_COLUMN\":\n      return { ...state, todos: action.order2 };\n    case \"CHANGE_COLUMNS\":\n      return { ...state };\n\n    // case \"SEARCH_TASK\":\n    //   if (action.val.length) {\n    //     let filteredTodos = state.todos.filter((query) => {\n    //       return (\n    //         query.title.toLowerCase().includes(action.val) ||\n    //         query.desc.toLowerCase().includes(action.val)\n    //       );\n    //     });\n    //     return { ...state, filteredTodos };\n    //   } else {\n    //     return { ...state };\n    //   }\n    // case \"UPDATE_TODOS\":\n    //   let todo = action.todo;\n    //   let updatedState = { ...state.todos, [todo.id]: { ...todo } };\n    //   return { ...state, todos: updatedState };\n    //\n    // case \"COMPLETE_TASK\":\n    //   state.todos.find((i) => i.id === action.id).isCompleted = !action.value;\n    //   return { ...state };\n    //\n    // case \"STAR_TASK\":\n    //   state.todos.find((i) => i.id === action.id).isStarred = !action.value;\n    //   return { ...state };\n    //\n    // case \"IMPORTANT_TASK\":\n    //   state.todos.find((i) => i.id === action.id).isImportant = !action.value;\n    //   return { ...state };\n    //\n    // case \"TRASH_TASK\":\n    //   state.todos.find((i) => i.id === action.id).isTrashed = true;\n    //   return { ...state };\n    //\n    // case \"UPDATE_LABEL\":\n    //   let taskToUpdate = state.todos.find((i) => i.id === action.id).tags;\n    //   if (!taskToUpdate.includes(action.label)) taskToUpdate.push(action.label);\n    //   else taskToUpdate.splice(taskToUpdate.indexOf(action.label), 1);\n    //   return { ...state };\n    //\n    // case \"UPDATE_TASK\":\n    //   let todoToUpdate = state.todos.find((i) => i.id === action.id);\n    //   todoToUpdate.title = action.title;\n    //   todoToUpdate.desc = action.desc;\n    //   return { ...state };\n    // case \"CHANGE_FILTER\":\n    //   state.routeParam = action.filter;\n    //   return { ...state };\n\n    default:\n      return state;\n  }\n};\n\nexport default todo;\n","import { combineReducers } from \"redux\";\nimport todo from \"./todo\";\n\nexport default combineReducers({\n  todo,\n});\n","import { combineReducers } from \"redux\";\nimport todoReducer from \"./todo/\";\n\nconst rootReducer = combineReducers({\n  todoApp: todoReducer,\n});\n\nexport default rootReducer;\n","import { createStore, applyMiddleware, compose } from \"redux\";\nimport createDebounce from \"redux-debounced\";\nimport thunk from \"redux-thunk\";\nimport rootReducer from \"../reducers/rootReducer\";\n\nconst middlewares = [thunk, createDebounce()];\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(\n  rootReducer,\n  {},\n  composeEnhancers(applyMiddleware(...middlewares))\n);\n\nexport { store };\n","import axios from \"axios\";\nconst apiURI = \"https://cryptic-beach-01154.herokuapp.com\";\nexport const getTodos = () => {\n  return async (dispatch) => {\n    await axios\n      .get(`${apiURI}/todo`)\n      .then((result) => {\n        dispatch({\n          type: \"GET_TODOS\",\n          todos: result.data,\n        });\n      })\n      .catch((err) => console.log(err));\n  };\n};\n/*------------------------------------ C O L U M N ------------------------------------*/\nexport const addNewColumn = (column) => {\n  return (dispatch) => {\n    axios.post(`${apiURI}/collums`, column).then((response) => {\n      dispatch({ type: \"ADD_COLUMN\", column });\n      dispatch(getTodos());\n    });\n  };\n};\n\nexport const changeColumns = (column) => {\n  return async (dispatch) => {\n    await axios\n      .put(`${apiURI}/collums`, column)\n      .then(() => {\n        dispatch(getTodos());\n      })\n      .catch((err) => console.log(err));\n  };\n};\n\nexport const patchColumns = ({ sourceColumn, destColumn }) => {\n  return async (dispatch) => {\n    await axios\n      .patch(`${apiURI}/collums`, {\n        sourceColumn,\n        destColumn,\n      })\n      .then(() => {\n        dispatch(getTodos());\n      })\n      .catch((err) => console.log(err));\n  };\n};\n\nexport const movingColumn = (order, order2) => {\n  return async (dispatch) => {\n    await (axios\n      .patch(`${apiURI}/todo`, order)\n      .then(() => {\n        dispatch(getTodos());\n      })\n      .catch((err) => console.log(err)),\n    dispatch({ type: \"PATCH_COLUMN\", order2 }));\n  };\n};\n\nexport const deleteColumn = (id) => {\n  return (dispatch) => {\n    axios\n      .delete(`${apiURI}/collums`, {\n        data: { id: id },\n      })\n      .then((response) => {\n        dispatch({ type: \"DELETE_COLUMN\", id });\n        dispatch(getTodos());\n      });\n  };\n};\n\n/*------------------------------------ T A S K ------------------------------------*/\nexport const addNewTask = (task) => {\n  return (dispatch) => {\n    axios.post(`${apiURI}/tasks`, task).then((response) => {\n      dispatch({ type: \"ADD_TASK\", task });\n      dispatch(getTodos());\n    });\n  };\n};\n\nexport const changeTask = (task) => {\n  return async (dispatch) => {\n    await axios\n      .put(`${apiURI}/tasks`, task)\n      .then(() => {\n        dispatch(getTodos());\n      })\n      .catch((err) => console.log(err));\n  };\n};\n\nexport const deleteTask = (id) => {\n  return (dispatch) => {\n    axios\n      .delete(`${apiURI}/tasks`, {\n        data: { id: id },\n      })\n      .then((response) => {\n        dispatch({ type: \"DELETE_TASK\", id });\n        dispatch(getTodos());\n      });\n  };\n};\n","import React, { Component } from \"react\";\nimport styled from \"styled-components\";\n\nfunction LightenDarkenColor(col, amt) {\n  var usePound = false;\n\n  if (col[0] == \"#\") {\n    col = col.slice(1);\n    usePound = true;\n  }\n\n  var num = parseInt(col, 16);\n\n  var r = (num >> 16) + amt;\n\n  if (r > 255) r = 255;\n  else if (r < 0) r = 0;\n\n  var b = ((num >> 8) & 0x00ff) + amt;\n\n  if (b > 255) b = 255;\n  else if (b < 0) b = 0;\n\n  var g = (num & 0x0000ff) + amt;\n\n  if (g > 255) g = 255;\n  else if (g < 0) g = 0;\n\n  return (usePound ? \"#\" : \"\") + (g | (b << 8) | (r << 16)).toString(16);\n}\n\nconst Button = styled.button`\n  width: 40px;\n  height: 40px;\n  background: ${(props) => (props.background ? props.background : \"white\")};\n  margin: 0 5px 5px 0;\n  border-radius: 5px;\n  border: none;\n  box-shadow: ${(props) =>\n    props.background === props.color\n      ? \"0px 0px 5px\" + LightenDarkenColor(props.color, -20)\n      : \"none\"};\n`;\n\nclass ColorPicker extends Component {\n  state = {\n    colors: [\n      \"#FF6900\",\n      \"#FCB900\",\n      \"#7BDCB5\",\n      \"#00D084\",\n      \"#8ED1FC\",\n      \"#0693E3\",\n      \"#ABB8C3\",\n      \"#EB144C\",\n      \"#F78DA7\",\n      \"#9900EF\",\n      \"#FFFFFF\",\n    ],\n  };\n  render() {\n    return this.state.colors.map((color) => (\n      <Button\n        color={this.props.color}\n        background={color}\n        onClick={(e) => {\n          this.props.onChangeComplete(color);\n        }}\n      />\n    ));\n  }\n}\n\nexport default ColorPicker;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { Draggable } from 'react-beautiful-dnd';\nimport {Button, Combobox, Dialog, IconButton, Menu, Popover, Textarea, TextInput} from \"evergreen-ui\";\nimport {changeTask, deleteTask} from \"./redux/actions/todo\";\nimport {connect} from \"react-redux\";\nimport ColorPicker from \"./colorPicker\";\n\nconst Container = styled.div`\n    border: none;\n    box-shadow:0 0px 5px rgba(127, 126, 126, 0.6),0 0px 0px rgba(0,0,0,0.22);\n    border-radius: 3px;\n    overflow: hidden;\ntext-overflow: ellipsis;\n    padding: 8px;\n    margin-bottom: 8px;\n    background-color: ${props =>\n            props.color ?\n                props.color : \n                'white'};\n`;\nconst Name = styled.div`\nfloat: left;\nwidth: 90%;\n`\nconst More = styled.div`\nfloat:right;\nwidth: 10%;\n`\nconst Item = styled.div`\n  margin: 0 0.5em 0.7em 0.5em;\n`;\nconst Submit = styled.div`\n  margin: 0.5em;\n  float: right;\n`;\nconst Title = styled.div`\n  margin: 0em 0 0.2em 0;\n`;\n\nconst Inputs = styled.div`\n  display: grid;\n  grid-template-columns: 50% 50%;\n`;\n\nconst Styles = {\n    boxShadow: \"none\",\n};\n\n\nclass Task extends React.Component {\n    state={\n        activeId: null,\n        task: {_id:null, owner: \"\", name: \"\", color: \"\", status: null, desk: \"\" },\n    }\n    render() {\n\n\n        return (\n            <Draggable\n                draggableId={this.props.task._id}\n                index={this.props.index}\n            >\n\n                {(provided, snapshot) => (\n                    <Container\n                        {...provided.draggableProps}\n                        {...provided.dragHandleProps}\n                        color={this.props.task.color}\n                        ref={provided.innerRef}\n                        isDragging={snapshot.isDragging}\n                    >\n                        <Dialog\n                            isShown={this.state.activeId === this.props.task._id}\n                            title=\"Edit task\"\n                            onCloseComplete={() => this.setState({ activeId: null })}\n                            hasFooter={false}\n                        >\n                            <Inputs>\n                                <Item>\n                                    <Title>Name</Title>\n                                    <TextInput\n                                        width={\"100%\"}\n                                        onChange={(e) =>\n                                            this.setState({\n                                                task: { ...this.state.task, name: e.target.value },\n                                            })\n                                        }\n                                        value={this.state.task.name}\n                                        placeholder={\"Enter the task name\"}\n                                    />\n                                </Item>\n                            </Inputs>\n                            <Item>\n                                <Title>Color</Title>\n                                <ColorPicker\n                                    color={this.state.task.color}\n                                    onChangeComplete={(color) =>\n                                        this.setState({\n                                            task: { ...this.state.task, color: color },\n                                        })\n                                    }\n                                />\n                            </Item>\n                            <Item>\n                                <Title>Description</Title>\n                                <Textarea\n                                    onChange={(e) =>\n                                        this.setState({\n                                            task: { ...this.state.task, desk: e.target.value },\n                                        })\n                                    }\n                                    value={this.state.task.desk}\n                                    placeholder=\"Enter the task description\"\n                                />\n                            </Item>\n\n                            <Submit>\n                                <Button\n                                    appearance=\"minimal\"\n                                    intent=\"success\"\n                                    onClick={() => {\n                                        this.props.changeTask(this.state.task);\n                                        this.setState({\n                                            activeId: false,\n                                            task: {_id:null, owner: \"\", name: \"\", color: \"\", status: null, desk: \"\" },\n                                        });\n                                    }}\n                                    disabled={\n                                        this.state.task.owner === \"\" || this.state.task.owner === null\n                                    }\n                                >\n                                    Submit\n                                </Button>\n                            </Submit>\n                        </Dialog>\n                        <Name>{this.props.task.name}</Name>\n                        <More>\n                        <Popover\n                            position={\"bottom-left\"}\n                            content={\n                                <Menu>\n                                    <Menu.Group>\n                                        <Menu.Item\n                                            onSelect={() => this.setState({\n                                                activeId: this.props.task._id,\n                                                task: { _id:this.props.task._id, owner: this.props.task.owner, name: this.props.task.name, color: this.props.task.color, status: this.props.task.status, desk: this.props.task.desk },\n                                            })}\n                                        >\n                                            Edit\n                                        </Menu.Item>\n                                        <Menu.Item intent=\"danger\" onSelect={() => {\n                                            this.props.deleteTask(this.props.task._id);\n                                        }}>\n                                            Delete\n                                        </Menu.Item>\n                                    </Menu.Group>\n                                </Menu>\n                            }\n                        >\n                            <IconButton height={24} appearance=\"minimal\" icon=\"more\" />\n                        </Popover>\n                        </More>\n                    </Container>\n                )}\n            </Draggable>\n        );\n    }\n}\nexport default connect(null,{changeTask, deleteTask})(Task)","import React from 'react';\nimport styled from 'styled-components';\nimport { Droppable, Draggable } from 'react-beautiful-dnd';\nimport Task from './task.jsx';\nimport {RiInformationLine} from \"react-icons/all\";\nimport {Button, Dialog, TextInput} from \"evergreen-ui\";\nimport ColorPicker from \"./colorPicker\";\nimport {changeColumns, deleteColumn} from \"./redux/actions/todo\";\nimport {connect} from \"react-redux\";\n\nconst Container = styled.div`\n    margin: 8px;\n    border: none;\n        box-shadow:0 0px 5px rgba(127, 126, 126, 0.6),0 0px 0px rgba(0,0,0,0.22);\n\n    background: white;\n    border-radius: 5px;\n    width: 300px;\n    display: flex;\n    flex-direction: column;\n`;\nconst Title = styled.h3`\n    padding: 8px;\n`;\n\nconst Title2 = styled.div`\n  margin: 0em 0 0.2em 0;\n`;\n\nconst TaskList = styled.div`\n    border-radius: 0 0 5px 5px;\n    padding: 8px;\n    transition: background-color 0.2s ease;\n    background-color: ${props => (props.color ? props.color: 'white')};\n    flex-grow: 1;\n    height:auto\n`;\n\nconst Item = styled.div`\n  margin: 0 0.5em 0.7em 0.5em;\n`;\nconst Submit = styled.div`\n  margin: 0.5em;\n  float: right;\n`;\n\n\n\n\n\n class Column extends React.Component {\n    state={\n        activeId:null,\n        collum:{name:\"\",color:\"\", _id:\"\"}\n    }\n    render() {\n        return (\n            <React.Fragment>\n                <Dialog\n                    isShown={this.state.activeId === this.props.column._id}\n                    title=\"Edit column\"\n                    onCloseComplete={() => this.setState({ activeId: null })}\n                    hasFooter={false}\n                >\n                    <Item>\n                        <Title2>Name</Title2>\n                        <TextInput\n                            onChange={(e) =>\n                                this.setState({\n                                    collum: { ...this.state.collum, name: e.target.value },\n                                })\n                            }\n                            value={this.state.collum.name}\n                        />\n                    </Item>\n                    <Item>\n                        <Title2>Color</Title2>\n                        <ColorPicker\n                            color={this.state.collum.color}\n                            onChangeComplete={(color) =>\n                                this.setState({\n                                    collum: { ...this.state.collum, color: color },\n                                })\n                            }\n                        />\n                    </Item>\n                    <Submit>\n                        <Button\n                            appearance=\"minimal\"\n                            intent=\"danger\"\n                            onClick={() => {\n                                this.props.deleteColumn(this.state.collum._id);\n                                this.setState({\n                                    activeId: null,\n                                    collum: {name:\"\",color:\"\", _id:\"\"},\n                                });\n                            }}\n                        >\n                            Delete\n                        </Button>\n                        <Button\n                            marginLeft={10}\n                            appearance=\"minimal\"\n                            intent=\"success\"\n                            onClick={() => {\n                                this.props.changeColumns(this.state.collum);\n                                this.setState({\n                                    activeId: null,\n                                    collum: {name:\"\",color:\"\", _id:\"\"},\n                                });\n                            }}\n                        >\n                            Save\n                        </Button>\n\n                    </Submit>\n                </Dialog>\n            <Draggable\n                draggableId={this.props.column._id}\n                index={this.props.index} \n            >\n                {(provided) => (\n                    <Container\n                        {...provided.draggableProps}\n                        ref={provided.innerRef}\n                    >\n                        <Title {...provided.dragHandleProps}>\n                            {this.props.column.name}\n                            <RiInformationLine\n                                style={{float:\"right\"}}\n                                cursor={\"pointer\"}\n                                marginLeft={\"1em\"}\n                                onClick={() => this.setState({\n                                    activeId: this.props.column._id,\n                                    collum:{\n                                        _id:this.props.column._id,\n                                        name:this.props.column.name,\n                                        color:this.props.column.color\n                                    }\n                                })}\n                            />\n\n                        </Title>\n                        <Droppable\n                            droppableId={this.props.column._id}\n                            isDropDisabled={this.props.isDropDisabled}\n                            type=\"task\"\n                        >\n                            {(provided, snapshot) => (\n                                <TaskList\n                                    ref={provided.innerRef} \n                                    {...provided.droppableProps}\n                                    isDraggingOver={snapshot.isDraggingOver}\n                                    color={this.props.column.color}\n                                >\n                                    {this.props.column.tasks.map((task ,index) =>\n                                    <Task\n                                        key={task._id}\n                                        task={task}\n                                        index={index}\n                                    />\n                                    )}\n\n                                    {provided.placeholder}\n                                </TaskList>\n                            )}\n                        </Droppable>\n                    </Container>\n                )}\n            </Draggable>\n            </React.Fragment>\n        );\n    }\n}\nexport default connect(null,{changeColumns, deleteColumn})(Column)","import React, { Component } from \"react\";\nimport styled from \"styled-components\";\nimport { Button, Combobox, Dialog, Textarea, TextInput } from \"evergreen-ui\";\nimport { addNewTask, addNewColumn } from \"./redux/actions/todo/index\";\nimport { connect } from \"react-redux\";\nimport ColorPicker from \"./colorPicker\";\n\nconst Components = styled.div`\n  padding: 1em;\n  margin: 1em;\n`;\n\nconst Item = styled.div`\n  margin: 0 0.5em 0.7em 0.5em;\n`;\nconst Submit = styled.div`\n  margin: 0.5em;\n  float: right;\n`;\nconst Title = styled.div`\n  margin: 0em 0 0.2em 0;\n`;\n\nconst Inputs = styled.div`\n  display: grid;\n  grid-template-columns: 50% 50%;\n`;\n\nconst Styles = {\n  boxShadow: \"none\",\n};\n\nclass Menu extends Component {\n  state = {\n    taskIsShown: false,\n    columnIsShown: false,\n    task: { owner: \"\", name: \"\", color: \"\", status: false, desk: \"\" },\n    collum: { name: \"\", color: \"\" },\n  };\n\n  render() {\n    const comboBoxItems = this.props.todos[0].collums.map((column) => ({\n      label: column.name,\n      id: column._id,\n    }));\n    return (\n      <Components>\n        <Dialog\n          isShown={this.state.taskIsShown}\n          title=\"Add new task\"\n          onCloseComplete={() =>\n            this.setState({\n              taskIsShown: false,\n              task: { owner: \"\", name: \"\", color: \"\", status: false, desk: \"\" },\n            })\n          }\n          hasFooter={false}\n        >\n          <Inputs>\n            <Item>\n              <Title>Column</Title>\n              <Combobox\n                style={Styles}\n                width={\"100%\"}\n                items={comboBoxItems}\n                itemToString={(item) => (item ? item.label : \"\")}\n                onChange={(selected) =>\n                  this.setState({\n                    task: { ...this.state.task, owner: selected.id },\n                  })\n                }\n                placeholder={\"Select the column\"}\n              />\n            </Item>\n            <Item>\n              <Title>Name</Title>\n              <TextInput\n                width={\"100%\"}\n                onChange={(e) =>\n                  this.setState({\n                    task: { ...this.state.task, name: e.target.value },\n                  })\n                }\n                value={this.state.task.name}\n                placeholder={\"Enter the task name\"}\n              />\n            </Item>\n          </Inputs>\n          <Item>\n            <Title>Color</Title>\n            <ColorPicker\n              color={this.state.task.color}\n              onChangeComplete={(color) =>\n                this.setState({\n                  task: { ...this.state.task, color: color },\n                })\n              }\n            />\n          </Item>\n          <Item>\n            <Title>Description</Title>\n            <Textarea\n              onChange={(e) =>\n                this.setState({\n                  task: { ...this.state.task, desk: e.target.value },\n                })\n              }\n              value={this.state.task.desk}\n              placeholder=\"Enter the task description\"\n            />\n          </Item>\n\n          <Submit>\n            <Button\n              appearance=\"minimal\"\n              intent=\"success\"\n              onClick={() => {\n                this.props.addNewTask(this.state.task);\n                this.setState({\n                  taskIsShown: false,\n                  task: { color: \"#FFFFFF\", status: false },\n                });\n              }}\n              disabled={\n                this.state.task.owner === \"\" || this.state.task.owner === null\n              }\n            >\n              Submit\n            </Button>\n          </Submit>\n        </Dialog>\n\n        <Dialog\n          isShown={this.state.columnIsShown}\n          title=\"Add new column\"\n          onCloseComplete={() =>\n            this.setState({\n              columnIsShown: false,\n              collum: { name: \"\", color: \"\" },\n            })\n          }\n          hasFooter={false}\n        >\n          <Item>\n            <Title>Name</Title>\n            <TextInput\n              onChange={(e) =>\n                this.setState({\n                  collum: { ...this.state.collum, name: e.target.value },\n                })\n              }\n              value={this.state.collum.name}\n              placeholder={\"Enter the column name\"}\n            />\n          </Item>\n          <Item>\n            <Title>Color</Title>\n            <ColorPicker\n              color={this.state.collum.color}\n              onChangeComplete={(color) =>\n                this.setState({\n                  collum: { ...this.state.collum, color: color },\n                })\n              }\n            />\n          </Item>\n          <Submit>\n            <Button\n              appearance=\"minimal\"\n              intent=\"success\"\n              onClick={() => {\n                this.props.addNewColumn(this.state.collum);\n                this.setState({ columnIsShown: false, collum: {} });\n              }}\n            >\n              Submit\n            </Button>\n          </Submit>\n        </Dialog>\n\n        <Button\n          intent=\"none\"\n          onClick={() => this.setState({ taskIsShown: true })}\n        >\n          New task\n        </Button>\n        <Button\n          intent=\"none\"\n          marginLeft={\"1em\"}\n          onClick={() => this.setState({ columnIsShown: true })}\n        >\n          New column\n        </Button>\n      </Components>\n    );\n  }\n}\nconst mapStateToProps = (state) => {\n  return {\n    app: state.todoApp,\n  };\n};\nexport default connect(mapStateToProps, { addNewTask, addNewColumn })(Menu);\n","import React from \"react\";\nimport \"@atlaskit/css-reset\";\nimport { DragDropContext, Droppable } from \"react-beautiful-dnd\";\nimport styled from \"styled-components\";\nimport Column from \"./column\";\nimport { connect } from \"react-redux\";\nimport {\n  getTodos,\n  changeColumns,\n  addNewColumn,\n  deleteColumn,\n  deleteTask,\n  movingColumn,\n  patchColumns,\n} from \"./redux/actions/todo\";\nimport Menu from \"./menu\";\nimport { Pane } from \"evergreen-ui\";\n\nconst Container = styled.div`\n  display: flex;\n`;\n\nclass Todo extends React.Component {\n  static getDerivedStateFromProps(props, state) {\n    if (props.app.todo.todos !== state.todos) {\n      return {\n        todos: props.app.todo.todos,\n      };\n    }\n\n    // Return null if the state hasn't changed\n    return null;\n  }\n  state = {\n    todos: null,\n  };\n\n  async componentDidMount() {\n    await this.props.getTodos();\n    this.setState({\n      todos: this.props.app.todo.todos,\n    });\n  }\n\n  onDragEnd = (result) => {\n    const { destination, source, type } = result;\n    if (!destination) return;\n\n    if (\n      destination.droppableId === source.droppableId &&\n      destination.index === source.index\n    ) {\n      return;\n    }\n\n    if (type === \"column\") {\n      const newColumnOrder = Array.from(this.state.todos[0].collums);\n      newColumnOrder.splice(source.index, 1);\n      newColumnOrder.splice(\n        destination.index,\n        0,\n        this.state.todos[0].collums[source.index]\n      );\n      const newTodos = {\n        0: { ...this.state.todos, collums: newColumnOrder },\n      };\n      this.props.movingColumn(newColumnOrder, newTodos);\n      return;\n    }\n\n    if (source.droppableId !== destination.droppableId) {\n      const sourceColumn = this.state.todos[0].collums.find(\n        (p) => p._id === source.droppableId\n      );\n      const destColumn = this.state.todos[0].collums.find(\n        (p) => p._id === destination.droppableId\n      );\n      const sourceItems = sourceColumn.tasks;\n      const destItems = destColumn.tasks;\n      const [removed] = sourceItems.splice(source.index, 1);\n      destItems.splice(destination.index, 0, removed);\n\n      this.props.patchColumns({\n        sourceColumn,\n        destColumn,\n      });\n    } else {\n      const column = this.state.todos[0].collums.find(\n        (p) => p._id === source.droppableId\n      );\n      const copiedItems = column.tasks;\n      const [removed] = copiedItems.splice(source.index, 1);\n      copiedItems.splice(destination.index, 0, removed);\n\n      this.props.changeColumns(column);\n    }\n  };\n\n  render() {\n    return this.state.todos !== null && this.state.todos.length !== 0 ? (\n      <React.Fragment>\n        <Menu todos={this.state.todos} />\n        <Pane\n          display=\"flex\"\n          margin={\"1em\"}\n          minHeight={\"70vh\"}\n          width={\"100%-2em\"}\n          overflow={\"auto\"}\n        >\n          <DragDropContext onDragEnd={this.onDragEnd}>\n            <Droppable\n              droppableId=\"all-columns\"\n              direction=\"horizontal\"\n              type=\"column\"\n            >\n              {(provided) => (\n                <Container ref={provided.innerRef} {...provided.droppableProps}>\n                  {this.state.todos[0].collums.map((columnId, index) => {\n                    const column = columnId;\n                    return (\n                      <Column\n                        key={column._id}\n                        column={column}\n                        tasks={column.tasks}\n                        index={index}\n                      />\n                    );\n                  })}\n                  {provided.placeholder}\n                </Container>\n              )}\n            </Droppable>\n          </DragDropContext>\n        </Pane>\n      </React.Fragment>\n    ) : null;\n  }\n}\nconst mapStateToProps = (state) => {\n  return {\n    app: state.todoApp,\n  };\n};\nexport default connect(mapStateToProps, {\n  getTodos,\n  addNewColumn,\n  deleteColumn,\n  deleteTask,\n  changeColumns,\n  movingColumn,\n  patchColumns,\n})(Todo);\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { store } from \"./redux/storeConfig/store\";\nimport Todo from \"./todo\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <Todo />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}